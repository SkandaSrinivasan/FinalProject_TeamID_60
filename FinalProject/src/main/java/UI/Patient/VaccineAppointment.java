/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Patient;

import Business.EcoSystem;
import Business.Network.Network;
import Business.Organization.CovidCareCenter;
import Business.Organization.Doctor;
import Business.Organization.Patient;
import Business.Organization.VaccineSiteOrganization;
import Business.UserAccount.UserAccount;
import JxMaps.main.MapMarker;
import JxMaps.main.Modal.LatLong;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Skanda
 */
public class VaccineAppointment extends javax.swing.JPanel {

    /**
     * Creates new form VaccineAppointment
     */
    EcoSystem system;
    UserAccount ua;
    public VaccineAppointment(EcoSystem system,UserAccount ua) {
        initComponents();
        this.system = system;
        this.ua = ua;
        for (Network n : system.getNetworkMap().values()) {
            networkbox.addItem(n);
        }
    }
    
    public void populateVaccine(){
    
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        networkbox = new javax.swing.JComboBox<>();
        setSite = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        vaxbox = new javax.swing.JComboBox<>();
        refresh = new javax.swing.JButton();

        jLabel1.setBackground(new java.awt.Color(0, 184, 148));
        jLabel1.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Make Vaccine Appointment");
        jLabel1.setOpaque(true);

        jLabel2.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Select State:");

        setSite.setBackground(new java.awt.Color(0, 184, 148));
        setSite.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        setSite.setForeground(new java.awt.Color(255, 255, 255));
        setSite.setText("Select Site");
        setSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSiteActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 184, 148));
        jButton2.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons8-networking-manager-24.png"))); // NOI18N
        jButton2.setText("MAKE APPOINTMENT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Roboto", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Available Vaccines:");

        refresh.setBackground(new java.awt.Color(255, 255, 255));
        refresh.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        refresh.setForeground(new java.awt.Color(255, 255, 255));
        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/refresh .png"))); // NOI18N
        refresh.setText("REFRESH");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(27, 27, 27)
                                .addComponent(vaxbox, 0, 148, Short.MAX_VALUE))
                            .addComponent(setSite, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(refresh))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(networkbox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(116, 116, 116))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(networkbox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(setSite, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(vaxbox, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 143, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void setSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSiteActionPerformed
        // TODO add your handling code here:
        Network net = (Network) networkbox.getSelectedItem();
        List<LatLong> coordinateList = new ArrayList<>();
        for (VaccineSiteOrganization o : net.getVaxCenter().getVaxSites()) {
            coordinateList.add(o.getLocation());
        }
        MapMarker map = new MapMarker();
        map.setMapMarkers(coordinateList, system);
    }//GEN-LAST:event_setSiteActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        LatLong tempLoc = system.getTempLocation();
        if (tempLoc == null) {
            JOptionPane.showMessageDialog(this, "Please set a valid location", "Create fail", JOptionPane.INFORMATION_MESSAGE);
        } else {
            VaccineSiteOrganization co = null;
            Network net = (Network) networkbox.getSelectedItem();
            for (VaccineSiteOrganization o : net.getVaxCenter().getVaxSites()) {
                if (o.getLocation().equals(system.getTempLocation())) {
                    co = o;
                }
            }
            vaxbox.removeAll();
            for (String s:co.getVaccineStock().keySet()) {
                if(co.getVaccineStock().get(s) > 0){
                    vaxbox.addItem(s+"("+String.valueOf(co.getVaccineStock().get(s)+")"));
                }
            }
            
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        Network net = (Network) networkbox.getSelectedItem();
        Patient pat = null;
        for (Patient p : net.getPatientDirectory().getPatients()) {
            if (p.getUser().equals(ua)) {
                pat = p;
            }
        }
        LatLong tempLoc = system.getTempLocation();
         if(pat.isVaxAppointment()==true){
            JOptionPane.showMessageDialog(this, "You already have a pending vaccination appointment", "Create fail", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (tempLoc == null) {
            JOptionPane.showMessageDialog(this, "Please set a valid location", "Create fail", JOptionPane.ERROR_MESSAGE);
        } else {
            VaccineSiteOrganization co = null;
            for (VaccineSiteOrganization o : net.getVaxCenter().getVaxSites()) {
                if (o.getLocation().equals(system.getTempLocation())) {
                    co = o;
                }
            }

            pat.setVaxAppointment(true);
            pat.setRequestedVaccine(vaxbox.getSelectedItem().toString().split("\\(")[0]);
            co.getPatients().add(pat);
            system.setTempLocation(null);
            JOptionPane.showMessageDialog(this, "Appointment Made!!", "Created", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JComboBox<Network> networkbox;
    private javax.swing.JButton refresh;
    private javax.swing.JButton setSite;
    private javax.swing.JComboBox<String> vaxbox;
    // End of variables declaration//GEN-END:variables
}
